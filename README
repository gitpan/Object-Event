NAME
    Object::Event - A class that provides an event callback interface

VERSION
    Version 1.1

SYNOPSIS
       package foo;
       use Object::Event;

       our @ISA = qw/Object::Event/;

       package main;
       my $o = foo->new;

       my $regguard = $o->reg_cb (foo => sub {
          print "I got an event, with these args: $_[1], $_[2], $_[3]\n";
       });

       $o->event (foo => 1, 2, 3);

       $o->unreg_cb ($regguard);
       # or just:
       $regguard = undef;

DESCRIPTION
    This module was mainly written for AnyEvent::XMPP, AnyEvent::IRC,
    AnyEvent::HTTPD and BS to provide a consistent API for registering and
    emitting events. Even though I originally wrote it for those modules I
    released it separately in case anyone may find this module useful.

    For more comprehensive event handling see also Glib and POE.

    This class provides a simple way to extend a class, by inheriting from
    this class, with an event callback interface.

    You will be able to register callbacks for events, identified by their
    names (a string) and call them later by invoking the "event" method with
    the event name and some arguments.

    There is even a syntactic sugar which allows to call methods on the
    instances of a from Object::Event-derived class, to invoke events. See
    "enable_methods" below. For this feature please also consult the test
    cases in the distribution for examples.

PERFORMANCE
    In the first version as presented here no special performance
    optimisations have been applied. So take care that it is fast enough for
    your purposes. At least for modules like AnyEvent::XMPP the overhead is
    probably not noticeable, as other technologies like XML already waste a
    lot more CPU cycles. Also I/O usually introduces _much_ larger/longer
    overheads than this simple event interface.

FUNCTIONS
    Object::Event::register_priority_alias ($alias, $priority)
        This package function will add a global priority alias. If $priority
        is undef the alias will be removed.

        There are 4 predefined aliases:

           before     =>  1000
           ext_before =>   500
           ext_after  =>  -500
           after      => -1000

        See also the "reg_cb" method for more information about aliases.

METHODS
    Object::Event->new (%args)
    Your::Subclass::Of::Object::Event->new (%args)
        This is the constructor for Object::Event, it will create a blessed
        hash reference initialized with %args.

        There are these special keys for %args:

        enable_methods => $bool
            If $bool is a true value this object will overwrite the methods
            in it's package with event emitting methods, and add the
            method's code as priority 0 event callback. The replacement will
            happen whenever an event callback is registered with "reg_cb".

    $obj->init_object_events ()
        This method should only be called if you are not able to call the
        "new" constructor of this class.

    $obj->set_exception_cb ($cb->($exception, $eventname))
        This method installs a callback that will be called when some other
        event callback threw an exception. The first argument to $cb will be
        the exception and the second the event name.

    $guard = $obj->reg_cb ($eventname => $cb->($obj, @args), ...)
    $guard = $obj->reg_cb ($eventname => $prio, $cb->($obj, @args), ...)
        This method registers a callback $cb1 for the event with the name
        $eventname1. You can also pass multiple of these eventname =>
        callback pairs.

        The return value will be an ID that represents the set of callbacks
        you have installed. Call "unreg_cb" with that ID to remove those
        callbacks again.

        The first argument for callbacks registered with the "reg_cb"
        function will always be the master object $obj. If you want to have
        the event object $ev (which represents an event which was sent by
        the "event" method) as first argument use the "reg_event_cb" method.

        The return value of the callbacks are ignored. If you need to pass
        any information from a handler to the caller of the event you have
        to establish your own "protocol" to do this. I recommend to pass an
        array reference to the handlers:

           $obj->reg_cb (event_foobar => sub {
              my ($self, $results) = @_;
              push @$results, time / 30;
           });

           my @results;
           $obj->event (event_foobar => \@results);
           for (@results) {
              # ...
           }

        The order of the callbacks in the call chain of the event depends on
        their priority. If you didn't specify any priority (see below) they
        get the default priority of 0, and are appended to the other
        priority 0 callbacks. The higher the priority number, the earlier
        the callbacks gets called in the chain.

        If $eventname1 starts with 'before_' the callback gets a priority of
        1000, and if it starts with 'ext_before_' it gets the priority 500.
        'after_' is mapped to the priority -1000 and 'ext_after_' to -500.

        If you want more fine grained control you can pass an array
        reference instead of the event name:

           ($eventname1, $prio) = ('test_abc', 100);
           $obj->reg_cb ([$eventname1, $prio] => sub {
              ...
           });

    $obj->unreg_cb ($cb)
        Removes the callback $cb from the set of registered callbacks.

    $obj->event ($eventname, @args)
        Emits the event $eventname and passes the arguments @args to the
        callbacks. The return value is a true value in case some handler was
        found and run. It returns false if no handler was found (see also
        the "handles" method below). Basically: It returns the same value as
        the "handles" method.

        Please note that an event can be stopped and reinvoked while it is
        being handled.

        See also the specification of the before and after events in
        "reg_cb" above.

        NOTE: Whenever an event is emitted the current set of callbacks
        registered to that event will be used. So, if you register another
        event callback for the same event that is executed at the moment, it
        will be called the next time when the event is emitted. Example:

           $obj->reg_cb (event_test => sub {
              my ($obj) = @_;

              print "Test1\n";
              $obj->unreg_me;

              $obj->reg_cb (event_test => sub {
                 my ($obj) = @_;
                 print "Test2\n";
                 $obj->unreg_me;
              });
           });

           $obj->event ('event_test'); # prints "Test1"
           $obj->event ('event_test'); # prints "Test2"

    my $bool = $obj->handles ($eventname)
        This method returns true if any event handler (either registered via
        "reg_cb" or by a method definition if "enable_methods" is enabled)
        has been setup for the event $eventname.

        It returns false if that is not the case.

    $obj->event_name
        Returns the name of the currently executed event.

    $obj->unreg_me
        Unregisters the currently executed callback.

    $continue_cb = $obj->stop_event
        This method stops the execution of callbacks of the current event,
        and returns (in non-void context) a callback that will let you
        continue the execution.

    $obj->add_forward ($obj, $cb)
        DEPRECATED: Don't use it! Just for backward compatibility for
        AnyEvent::XMPP version 0.4.

    $obj->remove_forward ($obj)
        DEPRECATED: Don't use it! Just for backward compatibility for
        AnyEvent::XMPP version 0.4.

    $obj->remove_all_callbacks ()
        This method removes all registered event callbacks from this object.

    $obj->events_as_string_dump ()
        This method returns a string dump of all registered event callbacks.
        This method is only for debugging purposes.

    __PACKAGE__->hand_event_methods_down ($eventname, ...);
        NOTE: This is only of interest to you if you enabled
        "enable_methods".

        If you want to build up a class hierarchy of Object::Event classes
        which pass down the defined event methods for events, you need to
        call this package method. It will pack up all given $eventnames for
        subclasses, which can 'inherit' these with the
        "inherit_event_methods_from" package method (see below).

        Because the event methods of a package are global with regard to the
        object instances they need to be added to, you need to register them
        for the subclasses.

        NOTE: If you want to hand down event methods from super-classes make
        sure you call "inherit_event_methods_from" BEFORE
        "hand_event_methods_down"!

        NOTE: For an example about how to use this see the test case
        "t/15_methods_subc.t".

    __PACKAGE__->hand_event_methods_down_from ($package, ...);
        NOTE: This is only of interest to you if you enabled
        "enable_methods".

        This is a sugar method for "hand_event_methods_down", which will
        hand down all event methods of the packages in the argument list,
        along with the in the current package overridden event method.

        NOTE: For an example about how to use this see the test case
        "t/15_methods_subc.t".

    __PACKAGE__->inherit_event_methods_from ('SUPER_PKG1', 'OTHER_SUPER',
    ...)
        NOTE: This is only of interest to you if you enabled
        "enable_methods".

        Call this package method if you want to inherit event methods from
        super packages, which you have to give as argument list.

        NOTE: For an example about how to use this see the test case
        "t/15_methods_subc.t".

AUTHOR
    Robin Redeker, "<elmex at ta-sa.org>", JID: "<elmex at jabber.org>"

SUPPORT
    You can find documentation for this module with the perldoc command.

        perldoc Object::Event

    You can also look for information at:

    *   AnnoCPAN: Annotated CPAN documentation

        <http://annocpan.org/dist/Object-Event>

    *   CPAN Ratings

        <http://cpanratings.perl.org/d/Object-Event>

    *   RT: CPAN's request tracker

        <http://rt.cpan.org/NoAuth/Bugs.html?Dist=Object-Event>

    *   Search CPAN

        <http://search.cpan.org/dist/Object-Event>

ACKNOWLEDGEMENTS
    Thanks go to:

      - Mons Anderson for suggesting the 'handles' method and
        the return value of the 'event' method and reporting bugs.

COPYRIGHT & LICENSE
    Copyright 2009 Robin Redeker, all rights reserved.

    This program is free software; you can redistribute it and/or modify it
    under the same terms as Perl itself.

